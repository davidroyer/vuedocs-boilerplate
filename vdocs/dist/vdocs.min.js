'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.propsIterator = propsIterator;
exports.defaultIterator = defaultIterator;
exports.createJsonFile = createJsonFile;
exports.createMarkdownFile = createMarkdownFile;
exports.createMarkdownContent = createMarkdownContent;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var outputDirectory = './docs/components';

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '- `' + prop + '` ***' + type.name.capitalize() + '***\n    \n    ' + description + '\n\n';
    }
    return propsContent;
}

function defaultIterator(obj) {
    var content = '';
    for (var propKey in obj) {

        var info = obj[propKey];
        content += '- `' + propKey + '`\n' + info.description + '\n\n';
    }
    return content;
}

function createJsonFile(content) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(filename, mdContent) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync(outputDirectory + '/' + filename, mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;


    var mdDocContent = '# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n';
    return mdDocContent;
}

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _vueDocgenApi = require('vue-docgen-api');

var vueDocs = _interopRequireWildcard(_vueDocgenApi);

var _readdirp = require('readdirp');

var _readdirp2 = _interopRequireDefault(_readdirp);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '- `' + prop + '` ***' + type.name.capitalize() + '***\n    \n    ' + description + '\n\n';
    }
    return propsContent;
}

function defaultIterator(obj) {
    var content = '';
    for (var propKey in obj) {

        var info = obj[propKey];
        content += '- `' + propKey + '`\n' + info.description + '\n\n';
    }
    return content;
}

function createJsonFile(content) {
    // console.log(content);
    try {
        _fsExtra2.default.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(config, filename, mdContent) {
    console.log(config.docsDir);
    try {
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/README.md', mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;


    var mdDocContent = '# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n';
    return mdDocContent;
}

function createComponentsNavFile(config, navArray) {
    var fileName = 'components-nav.json';
    console.log('USING NEW config.navDir: ', config.jsonDir);
    try {
        _fsExtra2.default.outputFileSync(config.jsonDir + '/' + fileName, JSON.stringify(navArray), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};

var init = function init() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var componentsDir = config.componentsDir,
        outputDir = config.outputDir;

    var readDirSettings = {
        root: _path2.default.resolve(componentsDir),
        entryType: 'all'
    };
    console.log('root: ', readDirSettings.root);

    var componentsNavArray = [];

    (0, _readdirp2.default)(readDirSettings).on('data', function (entry) {
        var name = entry.name,
            path = entry.path;
        // execute everytime a file is found in the providen directory

        if (entry.name.endsWith('.vue')) {
            var mdFileName = name.replace('.vue', '');
            var componentInfo = vueDocs.parse(readDirSettings.root + '/' + path);
            var mdContent = createMarkdownContent(componentInfo);
            createMarkdownFile(config, mdFileName, mdContent);
            componentsNavArray.push('/components/' + mdFileName + '/');
        }
    }).on('warn', function (warn) {
        console.log("Warn: ", warn);
    }).on('error', function (err) {
        console.log("Error: ", err);
    }).on('end', function () {
        createComponentsNavFile(config, componentsNavArray);
    });
    // In this example, this variable will store all the paths of the files and directories inside the providen path
};

exports.init = init;
exports.default = init;
